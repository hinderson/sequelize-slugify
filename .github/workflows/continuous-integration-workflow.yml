name: Continuous Integration
on: [push, pull_request]

env:
  SEQ_SLUG_DB: sequelize_slugify_test

jobs:
  lint:
    name: Code Linting/${{ matrix.node-versions.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-versions:
          - {name: 'Node.js 14', version: '14'}
    steps:
      - uses: actions/checkout@v2
      - name: Installing ${{ matrix.node-versions.name }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-versions.version }}
      - run: npm ci
      - run: npm run lint:report
      - name: Annotate Code Linting Results
        uses: ataylorme/eslint-annotate-action@1.1.2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          report-json: "eslint_report.json"

  test-sqlite:
    name: Test/${{ matrix.node-versions.name }}/SQLite
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        node-versions:
          - {name: 'Node.js 10', version: '10'}
          - {name: 'Node.js 12', version: '12'}
          - {name: 'Node.js 14', version: '14'}
    steps:
      - uses: actions/checkout@v2
      - name: Installing ${{ matrix.node-versions.name }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-versions.version }}
      - run: npm ci
      - run: npm run test-unit-sqlite

  test-pg:
    name: Test/${{ matrix.node-versions.name }}/${{ matrix.postgres-versions.name }}
    runs-on: ubuntu-latest
    needs: test-sqlite
    strategy:
      fail-fast: false
      matrix:
        node-versions:
          - {name: 'Node.js 14', version: '14'}
        postgres-versions:
          - {name: 'Postgres 9.5', version: '9.5'}
          - {name: 'Postgres 10',  version: '10'}
          - {name: 'Postgres 11',  version: '11'}
          - {name: 'Postgres 12',  version: '12'}
          - {name: 'Postgres 13',  version: '13'}
    services:
      postgres:
        image: postgres:${{ matrix.postgres-versions.version }}
        env:
          POSTGRES_USER: sequelize_slugify_test
          POSTGRES_PASSWORD: sequelize_slugify_test
          POSTGRES_DB: sequelize_slugify_test
        ports:
        - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Installing ${{ matrix.node-versions.name }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-versions.version }}
      - run: npm ci
      - name: run tests
        env:
          SEQ_SLUG_PG_PORT: 5432
        run: npm run test-unit-postgres

  test-mysql:
    name: Test/${{ matrix.node-versions.name }}/${{ matrix.mysql-versions.name }}
    runs-on: ubuntu-latest
    needs: test-sqlite
    strategy:
      fail-fast: false
      matrix:
        node-versions:
          - {name: 'Node.js 13', version: '13'}
        mysql-versions:
          - {name: 'MySQL 5.7', version: '5.7'}
          - {name: 'MySQL 8',   version: '8'}
    services:
      mysql:
        image: mysql:${{ matrix.mysql-versions.version }}
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: sequelize_slugify_test
          MYSQL_USER: sequelize_slugify_test
          MYSQL_PASSWORD: sequelize_slugify_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v2
      - name: Installing ${{ matrix.node-versions.name }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-versions.version }}
      - run: npm ci
      - name: run tests
        env:
          SEQ_SLUG_MYSQL_PORT: 3306
        run: npm run test-unit-mysql

  test-mariadb:
    name: Test/${{ matrix.node-versions.name }}/${{ matrix.mariadb-versions.name }}
    runs-on: ubuntu-latest
    needs: test-sqlite
    strategy:
      fail-fast: false
      matrix:
        node-versions:
          - {name: 'Node.js 14', version: '14'}
        mariadb-versions:
          - {name: 'MariaDB 10.3', version: '10.3'}
          - {name: 'MariaDB 10.4', version: '10.4'}
          - {name: 'MariaDB 10.5', version: '10.5'}
    services:
      mariadb:
        image: mariadb:${{ matrix.mariadb-versions.version }}
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: sequelize_slugify_test
          MYSQL_USER: sequelize_slugify_test
          MYSQL_PASSWORD: sequelize_slugify_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v2
      - name: Installing ${{ matrix.node-versions.name }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-versions.version }}
      - run: npm ci
      - name: run tests
        env:
          SEQ_SLUG_MARIADB_PORT: 3306
        run: npm run test:mariadb

  test-coverage:
    name: Coverage/${{ matrix.node-versions.name }}
    runs-on: ubuntu-latest
    needs: [test-pg, test-mysql, test-mariadb, test-mssql]
    strategy:
      matrix:
        node-versions:
          - {name: 'Node.js 14', version: '14'}
    steps:
      - uses: actions/checkout@v2
      - name: Installing ${{ matrix.node-versions.name }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-versions.version }}
      - run: npm ci
      - run: npm run cover-unit
      - name: report coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: npm run cover-report
